============================= test session starts ==============================
platform linux -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1
rootdir: /home/killua/Documents/Projects/tezos/prediction-market-contracts/wolfram-oracle
plugins: profiling-1.7.0, forked-1.3.0, lazy-fixture-0.6.3, regtest-1.4.6, sugar-0.9.4, mock-3.6.1, xdist-2.2.1, timeout-1.4.2
collected 63 items

tests/test_integration.py .......F..F...FFF..FFFF....FF....FFF..FFF..FFF [ 73%]
..F......FFFF..F.                                                        [100%]

=================================== FAILURES ===================================
________________ test_auction_bet_existing_address_correct_bet _________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5yJ3', 'name': 'mala', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_auction_bet_existing_address_correct_bet(market, revealed_account):
        auction = get_random_market(["bidded"])
        quantity = 1000
        rate = 2 ** 32
        transaction = market.bid_auction(auction['id'], revealed_account["name"], quantity, rate)
>       log_and_submit(transaction, revealed_account, market, auction["id"], error_func=raise_error, logging=False)

tests/test_integration.py:154: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils.py:201: in log_and_submit
    result = submit_transaction(transaction, error_func=error_func)
src/utils.py:109: in submit_transaction
    return error_func(err_message)
src/utils.py:86: in submit_transaction
    transaction_ = transaction.autofill(ttl=60, counter=count)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43762dc0>

Properties
.key		tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5y...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf4441f700>

Properties
.key		tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5y...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '68', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104304', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 184,
E             'with': {'string': 'Market auction closed'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:50:39.968 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_auction_bet_existing_address_correct_bet>>-----------------------------
2021-06-13 23:50:40.005 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'mala', 'key': 'tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5yJ3', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:50:40.006 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046510104
2021-06-13 23:50:40.006 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 29.308145
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:50:40.007 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 2813394481334475861, 'caller': {'name': 'romina', 'key': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'status': 'created,tezzed,financed,revealed'}, 'end': 1623620930.253919, 'status': 'bidded'}
2021-06-13 23:50:40.018 | DEBUG    | src.utils:log_and_submit:193 - 2813394481334475861 tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5yJ3 auctionBet {'prim': 'Pair', 'args': [{'int': '2813394481334475861'}, {'prim': 'Pair', 'args': [{'int': '4294967296'}, {'int': '1000'}]}]}
2021-06-13 23:50:40.147 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 184, 'with': {'string': 'Market auction closed'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:50:40.347 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046510104
2021-06-13 23:50:40.348 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 29.308145
2021-06-13 23:50:40.348 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
________________ test_auction_bet_insufficient_currency_balance ________________

market = <src.market.Market object at 0x7faf46555df0>
non_financed_account = {'key': 'tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf7m', 'name': 'leonidas', 'status': 'created'}

    def test_auction_bet_insufficient_currency_balance(market, non_financed_account):
        auction = get_random_market(["bidded"])
        quantity = 1000
        rate = 2 ** 32
        transaction = market.bid_auction(auction['id'], non_financed_account["name"], quantity, rate)
        with pytest.raises(RpcError, match=r'NotEnoughBalance'):
>           log_and_submit(
                transaction, non_financed_account, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf44186850>

Properties
.key		tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf7m', 'name': 'leonidas', 'status': 'created'}
market = 7684196501469117172, market_id = None
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf44186850>

Properties
.key		tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf44186850>

Properties
.key		tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf44186850>

Properties
.key		tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf439fcd90>

Properties
.key		tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
>       opg_with_metadata = opg.run()

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf439fcd90>

Properties
.key		tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
block_id = 'head'

    def run(self, block_id: str = 'head'):
        """Simulate operation without signature checks.
    
        :param block_id: Specify a level at which this operation should be applied (default is head)
        :returns: RPC response from `run_operation`
        """
>       return self.shell.blocks[block_id].helpers.scripts.run_operation.post(
            {
                'operation': {
                    'branch': self.branch,
                    'contents': self.contents,
                    'signature': base58_encode(b'0' * 64, b'sig').decode(),
                },
                'chain_id': self.chain_id,
            }
        )

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.rpc.helpers.ScriptsRunOperationQuery object at 0x7faf436e6640>

Properties
.path	/chains/main/blocks/head/hel...specific
"signature": <Base58 encoded>
}

:param operation: JSON input
:returns: JSON object (operation with metadata)

operation = {'chain_id': 'NetXnuwTfg9Box8', 'operation': {'branch': 'BMCsFgoAbHxFCSnN1cMdHmPhaWXjUXBF8rTewtDEzi431DJBamw', 'conten.....}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}}

    def post(self, operation):
        """Run an operation without signature checks.
    
        operation format:
    
        .. code-block:: python
    
            {
                "branch": <block_hash>,
                "contents": [ {} ... ],  // kind-specific
                "signature": <Base58 encoded>
            }
    
        :param operation: JSON input
        :returns: JSON object (operation with metadata)
        """
>       return self._post(json=operation)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/rpc/helpers.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.rpc.helpers.ScriptsRunOperationQuery object at 0x7faf436e6640>

Properties
.path	/chains/main/blocks/head/hel...specific
"signature": <Base58 encoded>
}

:param operation: JSON input
:returns: JSON object (operation with metadata)

json = {'chain_id': 'NetXnuwTfg9Box8', 'operation': {'branch': 'BMCsFgoAbHxFCSnN1cMdHmPhaWXjUXBF8rTewtDEzi431DJBamw', 'conten.....}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}}
params = None

    def _post(self, json=None, params=None):
>       return self.node.post(
            path=self.path,
            params=params,
            json=json
        )

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/rpc/query.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.rpc.node.RpcNode object at 0x7faf461335e0>

Node address
http://localhost:20000
path = '/chains/main/blocks/head/helpers/scripts/run_operation', params = None
json = {'chain_id': 'NetXnuwTfg9Box8', 'operation': {'branch': 'BMCsFgoAbHxFCSnN1cMdHmPhaWXjUXBF8rTewtDEzi431DJBamw', 'conten.....}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}}

    def post(self, path: str, params: Optional[Dict[str, Any]] = None, json=None) -> Union[requests.Response, str]:
>       response = self.request('POST', path, params=params, json=json)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/rpc/node.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.rpc.node.RpcNode object at 0x7faf461335e0>

Node address
http://localhost:20000
method = 'POST', path = '/chains/main/blocks/head/helpers/scripts/run_operation'
kwargs = {'json': {'chain_id': 'NetXnuwTfg9Box8', 'operation': {'branch': 'BMCsFgoAbHxFCSnN1cMdHmPhaWXjUXBF8rTewtDEzi431DJBamw'...: 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}}, 'params': None}
res = <Response [500]>

    def request(self, method: str, path: str, **kwargs) -> requests.Response:
        """Perform HTTP request to node.
    
        :param method: one of GET/POST/PUT/DELETE
        :param path: path to endpoint
        :param kwargs: requests.request arguments
        :raises RpcError: node has returned an error
        :returns: node response
        """
        logger.debug('>>>>> %s %s\n%s', method, path, json.dumps(kwargs, indent=4))
        res = self._session.request(
            method=method,
            url=_urljoin(self.uri[0], path),
            headers={
                'content-type': 'application/json',
                'user-agent': 'PyTezos',
            },
            **kwargs,
        )
        if res.status_code == 404:
            logger.debug('<<<<< %s\n%s', res.status_code, res.text)
            raise RpcError(f'Not found: {path}')
        if res.status_code != 200:
            logger.debug('<<<<< %s\n%s', res.status_code, pformat(res.text, indent=4))
>           raise RpcError.from_response(res)
E           pytezos.rpc.node.RpcError: ({'id': 'proto.008-PtEdo2Zk.implicit.empty_implicit_contract',
E             'implicit': 'tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf7m',
E             'kind': 'branch'},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/rpc/node.py:130: RpcError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
non_financed_account = {'key': 'tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf7m', 'name': 'leonidas', 'status': 'created'}

    def test_auction_bet_insufficient_currency_balance(market, non_financed_account):
        auction = get_random_market(["bidded"])
        quantity = 1000
        rate = 2 ** 32
        transaction = market.bid_auction(auction['id'], non_financed_account["name"], quantity, rate)
        with pytest.raises(RpcError, match=r'NotEnoughBalance'):
>           log_and_submit(
                transaction, non_financed_account, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'NotEnoughBalance' does not match "({'id': 'proto.008-PtEdo2Zk.implicit.empty_implicit_contract',\n  'implicit': 'tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf7m',\n  'kind': 'branch'},)".

tests/test_integration.py:179: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:50:40.773 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_auction_bet_insufficient_currency_balance>>-----------------------------
2021-06-13 23:50:40.811 | INFO     | tests.conftest:non_financed_account:231 - acount used for the call: {'name': 'leonidas', 'key': 'tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf7m', 'status': 'created'}
2021-06-13 23:50:40.835 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.operation.invalid_activation', 'kind': 'permanent', 'pkh': 'tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf7m'}
2021-06-13 23:50:40.835 | INFO     | tests.conftest:non_financed_account:236 - Non financed account: {'name': 'leonidas', 'key': 'tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf7m', 'status': 'created'} already available on the network
2021-06-13 23:50:40.836 | INFO     | tests.conftest:non_financed_account:237 - account stablecoin balance before call: 0
2021-06-13 23:50:40.836 | INFO     | tests.conftest:non_financed_account:238 - account tez balance before call: 0.000000
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:50:40.837 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 7684196501469117172, 'caller': {'name': 'nina', 'key': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620929.693888, 'status': 'bidded'}
2021-06-13 23:50:40.847 | DEBUG    | src.utils:log_and_submit:193 - None tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf7m auctionBet {'prim': 'Pair', 'args': [{'int': '7684196501469117172'}, {'prim': 'Pair', 'args': [{'int': '4294967296'}, {'int': '1000'}]}]}
2021-06-13 23:50:40.886 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.implicit.empty_implicit_contract', 'implicit': 'tz1ZrWi7V8tu3tVepAQVAEt8jgLz4VVEEf7m', 'kind': 'branch'}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:50:41.021 | INFO     | tests.conftest:non_financed_account:240 - account stablecoin balance after call: 0
2021-06-13 23:50:41.021 | INFO     | tests.conftest:non_financed_account:241 - account tez balance before call: 0.000000
2021-06-13 23:50:41.022 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
_____________________ test_clear_market_with_no_bet_market _____________________

market = <src.market.Market object at 0x7faf46555df0>

    def test_clear_market_with_no_bet_market(market):
        auction = get_random_market(["created"])
        transaction = market.auction_clear(auction['id'], auction['caller']['name'])
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, auction['caller'], market, auction['id'], error_func=raise_error, logging=LOGGING_RAISE
            )
E           Failed: DID NOT RAISE <class 'pytezos.rpc.node.RpcError'>

tests/test_integration.py:226: Failed
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:50:50.786 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_clear_market_with_no_bet_market>>-----------------------------
----------------------------- Captured stdout call -----------------------------
here 1623621046
da time 1623621047
da tim2 1623621050
here 1623621047
here 1623621047
here 1623621047
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:50:50.788 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 2710957963290937480, 'caller': {'name': 'anna', 'key': 'tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620929.010042, 'status': 'created'}
2021-06-13 23:50:50.801 | DEBUG    | src.utils:log_and_submit:193 - 2710957963290937480 tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt auctionClear {'int': '2710957963290937480'}
2021-06-13 23:50:50.974 | DEBUG    | src.utils:log_and_submit:202 - Result from TRANSACTION = {'chain_id': 'NetXnuwTfg9Box8', 'hash': 'op9Ra4JzbJUsPxHb2D6f5NS2VvwEQC9qeRR88Mr3eYeKAN2hQNw', 'protocol': 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA', 'branch': 'BLqg7CKfaRPwDfYUQRVefj6mQw8bv13UBZzJ3RVGyFVnSuc8aHt', 'contents': [{'kind': 'transaction', 'source': 'tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt', 'fee': '4214', 'counter': '66', 'gas_limit': '39237', 'storage_limit': '520', 'amount': '0', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'parameters': {'entrypoint': 'auctionClear', 'value': {'int': '2710957963290937480'}}}], 'signature': 'sigpYD4i7m15Wn2FQZ5VyxjYPJLHkKKd4U78SRp3qbcp48rJwRH5XAoXCevyH7hvFdLV71wXYDfRbotibFpMgEFdNzTLP11N'}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:50:51.005 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
__________ test_clear_market_insufficient_liquidity_from_bets[1-100] ___________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt', 'name': 'anna', 'status': 'created,tezzed,financed,revealed,revealed'}
quantity = 1, rate = 100

    @pytest.mark.parametrize("quantity,rate", [[1, 100], [1, 2]])
    def test_clear_market_insufficient_liquidity_from_bets(market, revealed_account, quantity, rate):
        auction = get_random_market(["created"])
        transaction = market.auction_clear(auction['id'], revealed_account['name'])
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, revealed_account, market, auction['id'], error_func=raise_error, logging=LOGGING_RAISE
            )
E           Failed: DID NOT RAISE <class 'pytezos.rpc.node.RpcError'>

tests/test_integration.py:236: Failed
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:50:51.015 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_clear_market_insufficient_liquidity_from_bets[1-100]>>-----------------------------
2021-06-13 23:50:51.052 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'anna', 'key': 'tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:50:51.052 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046511104
2021-06-13 23:50:51.052 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 29.334398
----------------------------- Captured stdout call -----------------------------
here 1623621047
da time 1623621048
da tim2 1623621051
here 1623621048
here 1623621048
here 1623621048
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:50:51.054 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 5927596476967254193, 'caller': {'name': 'romina', 'key': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'status': 'created,tezzed,financed,revealed'}, 'end': 1623620932.329655, 'status': 'created'}
2021-06-13 23:50:51.063 | DEBUG    | src.utils:log_and_submit:193 - 5927596476967254193 tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt auctionClear {'int': '5927596476967254193'}
2021-06-13 23:50:51.237 | DEBUG    | src.utils:log_and_submit:202 - Result from TRANSACTION = {'chain_id': 'NetXnuwTfg9Box8', 'hash': 'ongEj6msHgo6AdDT39EUvSxWRVMHTD8DUyxG5bjiXRYp1sMr3ZT', 'protocol': 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA', 'branch': 'BLUkz8tPbgGoyAFvr41NFvxd7jys27UAFbVp9CxB1LRnvBd16Ru', 'contents': [{'kind': 'transaction', 'source': 'tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt', 'fee': '4215', 'counter': '67', 'gas_limit': '39237', 'storage_limit': '524', 'amount': '0', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'parameters': {'entrypoint': 'auctionClear', 'value': {'int': '5927596476967254193'}}}], 'signature': 'sigZVg3q9bmdDyKhz4DFVKPcULBHPJVw611MUcc5MSRvyrrbirZAapL2CXagrpr48zmoRNsgtHZXnrQSY7Hw33BDXC5BjmMt'}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:50:51.269 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046511104
2021-06-13 23:50:51.269 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 29.334398
2021-06-13 23:50:51.270 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
___________ test_clear_market_insufficient_liquidity_from_bets[1-2] ____________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'name': 'romina', 'status': 'created,tezzed,financed,revealed'}
quantity = 1, rate = 2

    @pytest.mark.parametrize("quantity,rate", [[1, 100], [1, 2]])
    def test_clear_market_insufficient_liquidity_from_bets(market, revealed_account, quantity, rate):
        auction = get_random_market(["created"])
        transaction = market.auction_clear(auction['id'], revealed_account['name'])
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, revealed_account, market, auction['id'], error_func=raise_error, logging=LOGGING_RAISE
            )
E           Failed: DID NOT RAISE <class 'pytezos.rpc.node.RpcError'>

tests/test_integration.py:236: Failed
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:50:51.281 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_clear_market_insufficient_liquidity_from_bets[1-2]>>-----------------------------
2021-06-13 23:50:51.318 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'romina', 'key': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'status': 'created,tezzed,financed,revealed'}
2021-06-13 23:50:51.319 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046511104
2021-06-13 23:50:51.319 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 28.873437
----------------------------- Captured stdout call -----------------------------
here 1623621048
da time 1623621049
da tim2 1623621051
here 1623621049
here 1623621049
here 1623621049
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:50:51.321 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 2443491593429331396, 'caller': {'name': 'tang', 'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620926.738855, 'status': 'created'}
2021-06-13 23:50:51.330 | DEBUG    | src.utils:log_and_submit:193 - 2443491593429331396 tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t auctionClear {'int': '2443491593429331396'}
2021-06-13 23:50:51.494 | DEBUG    | src.utils:log_and_submit:202 - Result from TRANSACTION = {'chain_id': 'NetXnuwTfg9Box8', 'hash': 'onnYCm65vP1xxZoPrZjuZLdbqVKoe2HRYPtU784L1uw3CjzQvVC', 'protocol': 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA', 'branch': 'BLEjGeV71yXvEoo9fZBxHNhYiKTAFMFGDrUmqX4yUhjuExNdMMG', 'contents': [{'kind': 'transaction', 'source': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'fee': '4214', 'counter': '74', 'gas_limit': '39237', 'storage_limit': '524', 'amount': '0', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'parameters': {'entrypoint': 'auctionClear', 'value': {'int': '2443491593429331396'}}}], 'signature': 'sigqewhpB21esdSbNyiQLferyu2y6HLQtyYjzCgGUoeRt3E5PYsHwK7j4m9L6fq1vhpJNtCVB6gfgomBt7LLDxVkZcnnmyxF'}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:50:51.526 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046511104
2021-06-13 23:50:51.526 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 28.873437
2021-06-13 23:50:51.526 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
________________________ test_withdraw_auction_cleared _________________________

market = <src.market.Market object at 0x7faf46555df0>
stablecoin_id = 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'
revealed_account = {'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'name': 'tang', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_withdraw_auction_cleared(market, stablecoin_id, revealed_account):
        end = datetime.now() + timedelta(minutes=5)
        market_id, transaction = market.ask_question(
            "when",
            "tomorrow",
            revealed_account["name"],
            0,
            2 ** 32,
            "dededede",
            auction_end_date=end.timestamp(),
            market_id=None,
            token_contract=stablecoin_id
        )
        transaction = market.auction_withdraw(market_id, revealed_account['name'])
        # this should be working
>       before_storage, after_storage = log_and_submit(
            transaction,
            revealed_account,
            market,
            market_id,
            error_func=raise_error
        )

tests/test_integration.py:276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils.py:201: in log_and_submit
    result = submit_transaction(transaction, error_func=error_func)
src/utils.py:109: in submit_transaction
    return error_func(err_message)
src/utils.py:86: in submit_transaction
    transaction_ = transaction.autofill(ttl=60, counter=count)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43d3aee0>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43c277c0>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '72', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104296', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 347,
E             'with': {'string': 'Caller has not provided liquidity or participated in the '
E                                'auction'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:50:51.876 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_withdraw_auction_cleared>>-----------------------------
2021-06-13 23:50:51.915 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'tang', 'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:50:51.916 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046510104
2021-06-13 23:50:51.916 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 28.814436
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:50:51.944 | DEBUG    | src.utils:log_and_submit:193 - 4515042931623666805 tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet auctionWithdraw {'int': '4515042931623666805'}
2021-06-13 23:50:51.944 | DEBUG    | src.market:get_storage:340 - Querrying storage for market: 4515042931623666805
2021-06-13 23:50:51.965 | ERROR    | src.market:get_market_map_storage:385 - 4515042931623666805
2021-06-13 23:50:51.966 | DEBUG    | src.market:get_market_map_storage:386 - does not exist in market_map, market_id = 4515042931623666805
2021-06-13 23:50:56.407 | DEBUG    | src.utils:log_and_submit:198 - {'ledger_map': {}, 'liquidity_provider_map': {}, 'market_map': None, 'supply_map': {'no_token': 0, 'yes_token': 0, 'pool_liquidity': 0, 'auction_reward': 0, 'liquidity_reward': 0}}
2021-06-13 23:50:56.542 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 347, 'with': {'string': 'Caller has not provided liquidity or participated in the auction'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:50:56.832 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046510104
2021-06-13 23:50:56.833 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 28.814436
2021-06-13 23:50:56.833 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
_________________________ test_withdraw_auction_bidded _________________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_accounts = [{'key': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'name': 'nina', 'status': 'created,tezzed,financed,revealed,revealed'...': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'name': 'nina', 'status': 'created,tezzed,financed,revealed,revealed'}, ...]
stablecoin_id = 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'

    def test_withdraw_auction_bidded(market, revealed_accounts, stablecoin_id):
        auction = get_random_market(["bidded"])
        quantity = random.randint(0, 900)
        rate = random.randint(0, 2 ** 63)
        end_delay = random.uniform(0.05, 0.10)
        end = datetime.now() + timedelta(minutes=end_delay)
        caller = random.choice(revealed_accounts)
        """
        market_id, transaction = market.ask_question(
            id_generator(),
            id_generator(),
            caller['name'],
            quantity,
            rate,
            id_generator(),s
            auction_end_date=end.timestamp(),
            token_contract=stablecoin_id
        )
        log_and_submit(transaction, caller, market_id, error_func=raise_error)
        """
        transaction = market.auction_withdraw(auction['id'], auction['caller']['name'])
        storage = market.get_storage(auction['id'], auction['caller']['name'])
        state_of_market = storage['market_map']['state']
        logger.debug(f"state map = {state_of_market}")
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, auction['caller'], market, auction['id'], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:310: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf4388d1f0>

Properties
.key		tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt', 'name': 'anna', 'status': 'created,tezzed,financed,revealed,revealed'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 8644615183105308756
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf4388d1f0>

Properties
.key		tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf4388d1f0>

Properties
.key		tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf4388d1f0>

Properties
.key		tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43c6a280>

Properties
.key		tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '68', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104297', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 347,
E             'with': {'string': 'Caller has not provided liquidity or participated in the '
E                                'auction'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
revealed_accounts = [{'key': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'name': 'nina', 'status': 'created,tezzed,financed,revealed,revealed'...': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'name': 'nina', 'status': 'created,tezzed,financed,revealed,revealed'}, ...]
stablecoin_id = 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'

    def test_withdraw_auction_bidded(market, revealed_accounts, stablecoin_id):
        auction = get_random_market(["bidded"])
        quantity = random.randint(0, 900)
        rate = random.randint(0, 2 ** 63)
        end_delay = random.uniform(0.05, 0.10)
        end = datetime.now() + timedelta(minutes=end_delay)
        caller = random.choice(revealed_accounts)
        """
        market_id, transaction = market.ask_question(
            id_generator(),
            id_generator(),
            caller['name'],
            quantity,
            rate,
            id_generator(),s
            auction_end_date=end.timestamp(),
            token_contract=stablecoin_id
        )
        log_and_submit(transaction, caller, market_id, error_func=raise_error)
        """
        transaction = market.auction_withdraw(auction['id'], auction['caller']['name'])
        storage = market.get_storage(auction['id'], auction['caller']['name'])
        state_of_market = storage['market_map']['state']
        logger.debug(f"state map = {state_of_market}")
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, auction['caller'], market, auction['id'], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 347,\n  'with': {'string': 'Caller has not provided liquidity or participated in the '\n                     'auction'}},)".

tests/test_integration.py:310: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:50:56.846 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_withdraw_auction_bidded>>-----------------------------
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:50:56.848 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 8644615183105308756, 'caller': {'name': 'anna', 'key': 'tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620929.552817, 'status': 'bidded'}
2021-06-13 23:50:56.858 | DEBUG    | src.market:get_storage:340 - Querrying storage for market: 8644615183105308756
2021-06-13 23:51:01.438 | DEBUG    | tests.test_integration:test_withdraw_auction_bidded:308 - state map = {'marketBootstrapped': {'currency_pool': {'auction_reward_currency_pool': 8, 'liquidity_reward_currency_pool': 35, 'market_currency_pool': 838}, 'bootstrap_yes_probability': 8202029856455012400, 'bootstrapped_at_block': 146, 'liquidity_reward_supply_updated_at_block': 146, 'resolution': None}}
2021-06-13 23:51:01.439 | DEBUG    | src.utils:log_and_submit:193 - 8644615183105308756 tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt auctionWithdraw {'int': '8644615183105308756'}
2021-06-13 23:51:01.567 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 347, 'with': {'string': 'Caller has not provided liquidity or participated in the auction'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:01.663 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
________________________ test_withdraw_auction_resolved ________________________

market = <src.market.Market object at 0x7faf46555df0>

    def test_withdraw_auction_resolved(market):
        auction = get_random_market(["resolved"])
        transaction = market.auction_withdraw(auction['id'], auction['caller']['name'])
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, auction['caller'], market, auction['id'], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf441f5400>

Properties
.key		tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'name': 'romina', 'status': 'created,tezzed,financed,revealed'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 395130392047603165
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf441f5400>

Properties
.key		tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf441f5400>

Properties
.key		tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf441f5400>

Properties
.key		tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43c71820>

Properties
.key		tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '75', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104296', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 347,
E             'with': {'string': 'Caller has not provided liquidity or participated in the '
E                                'auction'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>

    def test_withdraw_auction_resolved(market):
        auction = get_random_market(["resolved"])
        transaction = market.auction_withdraw(auction['id'], auction['caller']['name'])
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, auction['caller'], market, auction['id'], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 347,\n  'with': {'string': 'Caller has not provided liquidity or participated in the '\n                     'auction'}},)".

tests/test_integration.py:319: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:01.679 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_withdraw_auction_resolved>>-----------------------------
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:01.681 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 395130392047603165, 'caller': {'name': 'romina', 'key': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'status': 'created,tezzed,financed,revealed'}, 'end': 1623620931.800879, 'status': 'resolved'}
2021-06-13 23:51:01.693 | DEBUG    | src.utils:log_and_submit:193 - 395130392047603165 tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t auctionWithdraw {'int': '395130392047603165'}
2021-06-13 23:51:01.849 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 347, 'with': {'string': 'Caller has not provided liquidity or participated in the auction'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:01.949 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
_________________ test_withdraw_auction_non_existent_market_id _________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'name': 'tang', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_withdraw_auction_non_existent_market_id(market, revealed_account):
        transaction = market.auction_withdraw(1, revealed_account['name'])
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(transaction, revealed_account, market, 1, error_func=raise_error, logging=LOGGING_RAISE)

tests/test_integration.py:327: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf438b5a90>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'name': 'tang', 'status': 'created,tezzed,financed,revealed,revealed'}
market = <src.market.Market object at 0x7faf46555df0>, market_id = 1
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf438b5a90>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf438b5a90>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf438b5a90>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43869460>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '72', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104288', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 347,
E             'with': {'string': 'Caller has not provided liquidity or participated in the '
E                                'auction'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'name': 'tang', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_withdraw_auction_non_existent_market_id(market, revealed_account):
        transaction = market.auction_withdraw(1, revealed_account['name'])
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(transaction, revealed_account, market, 1, error_func=raise_error, logging=LOGGING_RAISE)
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 347,\n  'with': {'string': 'Caller has not provided liquidity or participated in the '\n                     'auction'}},)".

tests/test_integration.py:327: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:01.958 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_withdraw_auction_non_existent_market_id>>-----------------------------
2021-06-13 23:51:01.996 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'tang', 'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:51:01.997 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046510104
2021-06-13 23:51:01.997 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 28.814436
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:02.007 | DEBUG    | src.utils:log_and_submit:193 - 1 tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet auctionWithdraw {'int': '1'}
2021-06-13 23:51:02.138 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 347, 'with': {'string': 'Caller has not provided liquidity or participated in the auction'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:02.231 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046510104
2021-06-13 23:51:02.232 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 28.814436
2021-06-13 23:51:02.232 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
___________________ test_mint_insufficient_currency_balance ____________________

market = <src.market.Market object at 0x7faf46555df0>
non_financed_account = {'key': 'tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHNRE', 'name': 'clara', 'status': 'created'}

    def test_mint_insufficient_currency_balance(market, non_financed_account):
        auction = get_random_market(["cleared"])
        transaction = market.mint(auction['id'], non_financed_account['name'], 100)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, non_financed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf439c20d0>

Properties
.key		tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHN...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHNRE', 'name': 'clara', 'status': 'created'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 4062770484545646151
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf439c20d0>

Properties
.key		tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHN...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf439c20d0>

Properties
.key		tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHN...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf439c20d0>

Properties
.key		tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHN...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43ad5ac0>

Properties
.key		tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHN...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '60', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104307', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 348,
E             'with': {'string': 'NotEnoughBalance'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
non_financed_account = {'key': 'tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHNRE', 'name': 'clara', 'status': 'created'}

    def test_mint_insufficient_currency_balance(market, non_financed_account):
        auction = get_random_market(["cleared"])
        transaction = market.mint(auction['id'], non_financed_account['name'], 100)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, non_financed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 348,\n  'with': {'string': 'NotEnoughBalance'}},)".

tests/test_integration.py:380: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
the activation is not valid, the account does not have any tez
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:12.230 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_mint_insufficient_currency_balance>>-----------------------------
2021-06-13 23:51:12.272 | INFO     | tests.conftest:non_financed_account:231 - acount used for the call: {'name': 'clara', 'key': 'tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHNRE', 'status': 'created'}
2021-06-13 23:51:12.322 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'contract': 'tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHNRE', 'id': 'proto.008-PtEdo2Zk.contract.previously_revealed_key', 'kind': 'branch'}
2021-06-13 23:51:12.323 | INFO     | tests.conftest:non_financed_account:237 - account stablecoin balance before call: 0
2021-06-13 23:51:12.323 | INFO     | tests.conftest:non_financed_account:238 - account tez balance before call: 9.999632
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:12.324 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 4062770484545646151, 'caller': {'name': 'siri', 'key': 'tz1MT1ZfNoDXzWvUj4zJg8cVq7tt7a6QcC58', 'status': 'created,tezzed,financed,revealed'}, 'end': 1623620926.731294, 'status': 'cleared'}
2021-06-13 23:51:12.333 | DEBUG    | src.utils:log_and_submit:193 - 4062770484545646151 tz1dWWkzwEKWg9S7sA3A2gFcZXzyz3ekHNRE marketEnterExit {'prim': 'Pair', 'args': [{'prim': 'Left', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '4062770484545646151'}, {'int': '100'}]}]}
2021-06-13 23:51:12.411 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 348, 'with': {'string': 'NotEnoughBalance'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:12.510 | INFO     | tests.conftest:non_financed_account:240 - account stablecoin balance after call: 0
2021-06-13 23:51:12.510 | INFO     | tests.conftest:non_financed_account:241 - account tez balance before call: 9.999632
2021-06-13 23:51:12.510 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
__________________________ test_burn_token_on_cleared __________________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'name': 'nina', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_burn_token_on_cleared(market, revealed_account):
        quantity = 100
        auction = get_random_market(["cleared"])
        transaction = market.burn(auction['id'], revealed_account['name'], quantity)
>       before_storage, after_storage = log_and_submit(
            transaction,
            revealed_account,
            market,
            auction['id'],
            error_func=raise_error
        )

tests/test_integration.py:394: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils.py:201: in log_and_submit
    result = submit_transaction(transaction, error_func=error_func)
src/utils.py:109: in submit_transaction
    return error_func(err_message)
src/utils.py:86: in submit_transaction
    transaction_ = transaction.autofill(ttl=60, counter=count)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43a853d0>

Properties
.key		tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43d3a730>

Properties
.key		tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '73', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104308', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 398,
E             'with': {'string': 'Not enough balance in source account'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:12.521 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_burn_token_on_cleared>>-----------------------------
2021-06-13 23:51:12.559 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'nina', 'key': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:51:12.559 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046511004
2021-06-13 23:51:12.559 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 28.746475
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:12.560 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 8381705834555248983, 'caller': {'name': 'nina', 'key': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620925.728106, 'status': 'cleared'}
2021-06-13 23:51:12.570 | DEBUG    | src.utils:log_and_submit:193 - 8381705834555248983 tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B marketEnterExit {'prim': 'Pair', 'args': [{'prim': 'Right', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '8381705834555248983'}, {'int': '100'}]}]}
2021-06-13 23:51:12.570 | DEBUG    | src.market:get_storage:340 - Querrying storage for market: 8381705834555248983
2021-06-13 23:51:17.145 | DEBUG    | src.utils:log_and_submit:198 - {'ledger_map': {}, 'liquidity_provider_map': {}, 'market_map': {'metadata': {'ipfs_hash': 'TI4MEZLAHB7WGJS1Z', 'description': 'Question: XO3FKKBNTZ1QIMDG8 Answer: 08XZ1H44UGQ2MOEGI', 'adjudicator': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'currency': {'fa12': 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'}}, 'state': {'marketBootstrapped': {'currency_pool': {'auction_reward_currency_pool': 2, 'liquidity_reward_currency_pool': 8, 'market_currency_pool': 205}, 'bootstrap_yes_probability': 3812089890338139803, 'bootstrapped_at_block': 147, 'liquidity_reward_supply_updated_at_block': 147, 'resolution': None}}}, 'supply_map': {'no_token': {'total_supply': 215, 'in_reserve': 159}, 'yes_token': {'total_supply': 215, 'in_reserve': 0}, 'pool_liquidity': {'total_supply': 44, 'in_reserve': 44}, 'auction_reward': {'total_supply': 215, 'in_reserve': 215}, 'liquidity_reward': 0}}
2021-06-13 23:51:17.286 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 398, 'with': {'string': 'Not enough balance in source account'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:17.359 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046511004
2021-06-13 23:51:17.359 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 28.746475
2021-06-13 23:51:17.360 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
____________________ test_swap_token_token_on_cleared[yes] _____________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'name': 'patoch', 'status': 'created,tezzed,financed,revealed,revealed'}
token_type = 'yes'

    @pytest.mark.parametrize('token_type', ["yes", "no"])
    def test_swap_token_token_on_cleared(market, revealed_account, token_type):
        # quantity = 20000
        auction = get_random_market(["cleared"])
        quantity = 200
        min_buy = 30
        #auction = get_random_market(["cleared"])
        transaction = market.mint(auction['id'], revealed_account['name'], 2 * quantity)
>       log_and_submit(transaction, revealed_account, market, auction["id"], error_func=raise_error)

tests/test_integration.py:459: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils.py:201: in log_and_submit
    result = submit_transaction(transaction, error_func=error_func)
src/utils.py:109: in submit_transaction
    return error_func(err_message)
src/utils.py:86: in submit_transaction
    transaction_ = transaction.autofill(ttl=60, counter=count)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43bae4f0>

Properties
.key		tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckb...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf436aa190>

Properties
.key		tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckb...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '135', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104309', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 684,
E             'with': {'string': 'Market has already been resolved'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:18.458 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_swap_token_token_on_cleared[yes]>>-----------------------------
2021-06-13 23:51:18.496 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'patoch', 'key': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:51:18.496 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046511104
2021-06-13 23:51:18.496 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 19.444355
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:18.498 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 8375622628928386292, 'caller': {'name': 'siri', 'key': 'tz1MT1ZfNoDXzWvUj4zJg8cVq7tt7a6QcC58', 'status': 'created,tezzed,financed,revealed'}, 'end': 1623620928.623378, 'status': 'cleared'}
2021-06-13 23:51:18.507 | DEBUG    | src.utils:log_and_submit:193 - 8375622628928386292 tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB marketEnterExit {'prim': 'Pair', 'args': [{'prim': 'Left', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '8375622628928386292'}, {'int': '400'}]}]}
2021-06-13 23:51:18.507 | DEBUG    | src.market:get_storage:340 - Querrying storage for market: 8375622628928386292
2021-06-13 23:51:23.008 | DEBUG    | src.utils:log_and_submit:198 - {'ledger_map': {}, 'liquidity_provider_map': {}, 'market_map': {'metadata': {'ipfs_hash': 'OYV25NVRPQKYW1D3N', 'description': 'Question: PNI1WTEIC5TBDPHG1 Answer: 17LKJTOD1J0OFQUMN', 'adjudicator': 'tz1MT1ZfNoDXzWvUj4zJg8cVq7tt7a6QcC58', 'currency': {'fa12': 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'}}, 'state': {'marketBootstrapped': {'currency_pool': {'auction_reward_currency_pool': 3, 'liquidity_reward_currency_pool': 12, 'market_currency_pool': 300}, 'bootstrap_yes_probability': 2578931140346982627, 'bootstrapped_at_block': 132, 'liquidity_reward_supply_updated_at_block': 132, 'resolution': {'winning_prediction': 'yes', 'resolved_at_block': 153}}}}, 'supply_map': {'no_token': {'total_supply': 315, 'in_reserve': 264}, 'yes_token': {'total_supply': 315, 'in_reserve': 0}, 'pool_liquidity': {'total_supply': 44, 'in_reserve': 44}, 'auction_reward': {'total_supply': 315, 'in_reserve': 315}, 'liquidity_reward': 0}}
2021-06-13 23:51:23.139 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 684, 'with': {'string': 'Market has already been resolved'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:23.209 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046511104
2021-06-13 23:51:23.209 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 19.444355
2021-06-13 23:51:23.210 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
_____________________ test_swap_token_token_on_cleared[no] _____________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho', 'name': 'lily', 'status': 'created,tezzed,financed,revealed'}
token_type = 'no'

    @pytest.mark.parametrize('token_type', ["yes", "no"])
    def test_swap_token_token_on_cleared(market, revealed_account, token_type):
        # quantity = 20000
        auction = get_random_market(["cleared"])
        quantity = 200
        min_buy = 30
        #auction = get_random_market(["cleared"])
        transaction = market.mint(auction['id'], revealed_account['name'], 2 * quantity)
        log_and_submit(transaction, revealed_account, market, auction["id"], error_func=raise_error)
        transaction = market.swap_tokens(auction['id'], revealed_account['name'], token_type, quantity, min_buy)
        before_storage, after_storage = log_and_submit(
            transaction,
            revealed_account,
            market,
            auction['id'],
            error_func=raise_error
        )
        lst_token = ["yes", "no"]
        lst_token.remove(token_type)
        before_ledger_supply = before_storage["ledger_map"]
        after_ledger_supply = after_storage["ledger_map"]
        token_to_sell = token_type + '_token'
        token_to_buy = lst_token[0] + '_token'
>       assert after_ledger_supply[token_to_sell]
E       KeyError: 'no_token'

tests/test_integration.py:474: KeyError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:23.222 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_swap_token_token_on_cleared[no]>>-----------------------------
2021-06-13 23:51:23.259 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'lily', 'key': 'tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho', 'status': 'created,tezzed,financed,revealed'}
2021-06-13 23:51:23.259 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046511104
2021-06-13 23:51:23.260 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 9.225171
----------------------------- Captured stdout call -----------------------------
here 1623621066
da time 1623621067
da tim2 1623621087
here 1623621087
here 1623621087
here 1623621087
here 1623621087
here 1623621087
here 1623621087
here 1623621087
here 1623621087
da time 1623621088
da tim2 1623621097
here 1623621097
here 1623621097
here 1623621097
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:23.261 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 8662788755688175832, 'caller': {'name': 'patoch', 'key': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620927.119203, 'status': 'cleared'}
2021-06-13 23:51:23.272 | DEBUG    | src.utils:log_and_submit:193 - 8662788755688175832 tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho marketEnterExit {'prim': 'Pair', 'args': [{'prim': 'Left', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '8662788755688175832'}, {'int': '400'}]}]}
2021-06-13 23:51:23.273 | DEBUG    | src.market:get_storage:340 - Querrying storage for market: 8662788755688175832
2021-06-13 23:51:27.870 | DEBUG    | src.utils:log_and_submit:198 - {'ledger_map': {}, 'liquidity_provider_map': {}, 'market_map': {'metadata': {'ipfs_hash': 'VDSFH35EU9VDP7GAH', 'description': 'Question: KTP3LWTOJ0RTVMLNK Answer: T0AE7QZDLGV6V5L7V', 'adjudicator': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'currency': {'fa12': 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'}}, 'state': {'marketBootstrapped': {'currency_pool': {'auction_reward_currency_pool': 4, 'liquidity_reward_currency_pool': 16, 'market_currency_pool': 380}, 'bootstrap_yes_probability': 6403374867416970695, 'bootstrapped_at_block': 144, 'liquidity_reward_supply_updated_at_block': 144, 'resolution': None}}}, 'supply_map': {'no_token': {'total_supply': 400, 'in_reserve': 188}, 'yes_token': {'total_supply': 400, 'in_reserve': 0}, 'pool_liquidity': {'total_supply': 138, 'in_reserve': 138}, 'auction_reward': {'total_supply': 400, 'in_reserve': 400}, 'liquidity_reward': 0}}
2021-06-13 23:51:28.063 | DEBUG    | src.utils:log_and_submit:202 - Result from TRANSACTION = {'chain_id': 'NetXnuwTfg9Box8', 'hash': 'onvbU4TvXdq8vcz9nSFuNB9NKJR6r1rzsvzczTKJS7Zu7BWm1zu', 'protocol': 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA', 'branch': 'BLgGGxmuz9eVXxnysgH4i1yEvaxwiUCss7bPo2p6tgKstDFWHa6', 'contents': [{'kind': 'transaction', 'source': 'tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho', 'fee': '6352', 'counter': '437', 'gas_limit': '60454', 'storage_limit': '236', 'amount': '0', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'parameters': {'entrypoint': 'marketEnterExit', 'value': {'prim': 'Pair', 'args': [{'prim': 'Left', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '8662788755688175832'}, {'int': '400'}]}]}}}], 'signature': 'sigmRXd27fiu3SddFPFwhckiC79BfMExKcjStzpudYXgdTKsWSPErAoz7C5aYwnue4Laoebd6yN6NWMWYsfWYX8Uc5yi8CVa'}
2021-06-13 23:51:28.063 | DEBUG    | src.market:get_storage:340 - Querrying storage for market: 8662788755688175832
2021-06-13 23:51:32.622 | DEBUG    | src.utils:log_and_submit:206 - {'ledger_map': {'lily': {'no_token': 400, 'yes_token': 400, 'pool_liquidity': 0, 'auction_reward': 0, 'liquidity_reward': 0}}, 'liquidity_provider_map': {}, 'market_map': {'metadata': {'ipfs_hash': 'VDSFH35EU9VDP7GAH', 'description': 'Question: KTP3LWTOJ0RTVMLNK Answer: T0AE7QZDLGV6V5L7V', 'adjudicator': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'currency': {'fa12': 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'}}, 'state': {'marketBootstrapped': {'currency_pool': {'auction_reward_currency_pool': 8, 'liquidity_reward_currency_pool': 32, 'market_currency_pool': 760}, 'bootstrap_yes_probability': 6403374867416970695, 'bootstrapped_at_block': 144, 'liquidity_reward_supply_updated_at_block': 144, 'resolution': None}}}, 'supply_map': {'no_token': {'total_supply': 800, 'in_reserve': 188}, 'yes_token': {'total_supply': 800, 'in_reserve': 0}, 'pool_liquidity': {'total_supply': 138, 'in_reserve': 138}, 'auction_reward': {'total_supply': 400, 'in_reserve': 400}, 'liquidity_reward': 0}}
2021-06-13 23:51:32.632 | DEBUG    | src.utils:log_and_submit:193 - 8662788755688175832 tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho swapTokens {'prim': 'Pair', 'args': [{'prim': 'Left', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '8662788755688175832'}, {'int': '200'}]}, {'int': '30'}]}
2021-06-13 23:51:32.632 | DEBUG    | src.market:get_storage:340 - Querrying storage for market: 8662788755688175832
2021-06-13 23:51:37.207 | DEBUG    | src.utils:log_and_submit:198 - {'ledger_map': {'lily': {'no_token': 400, 'yes_token': 400, 'pool_liquidity': 0, 'auction_reward': 0, 'liquidity_reward': 0}}, 'liquidity_provider_map': {}, 'market_map': {'metadata': {'ipfs_hash': 'VDSFH35EU9VDP7GAH', 'description': 'Question: KTP3LWTOJ0RTVMLNK Answer: T0AE7QZDLGV6V5L7V', 'adjudicator': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'currency': {'fa12': 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'}}, 'state': {'marketBootstrapped': {'currency_pool': {'auction_reward_currency_pool': 8, 'liquidity_reward_currency_pool': 32, 'market_currency_pool': 760}, 'bootstrap_yes_probability': 6403374867416970695, 'bootstrapped_at_block': 144, 'liquidity_reward_supply_updated_at_block': 144, 'resolution': None}}}, 'supply_map': {'no_token': {'total_supply': 800, 'in_reserve': 188}, 'yes_token': {'total_supply': 800, 'in_reserve': 0}, 'pool_liquidity': {'total_supply': 138, 'in_reserve': 138}, 'auction_reward': {'total_supply': 400, 'in_reserve': 400}, 'liquidity_reward': 0}}
2021-06-13 23:51:37.375 | DEBUG    | src.utils:log_and_submit:202 - Result from TRANSACTION = {'chain_id': 'NetXnuwTfg9Box8', 'hash': 'ooy1w8aLwtNAsM55qbytoR1rk7hqiQrHDkaF1y7rVfjjx59dMMG', 'protocol': 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA', 'branch': 'BLNYPgnFcxYPaQT185HgGMepvDE5k2yRoGQHszFAXVfhb5cgo5M', 'contents': [{'kind': 'transaction', 'source': 'tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho', 'fee': '3755', 'counter': '438', 'gas_limit': '34436', 'storage_limit': '100', 'amount': '0', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'parameters': {'entrypoint': 'swapTokens', 'value': {'prim': 'Pair', 'args': [{'prim': 'Left', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '8662788755688175832'}, {'int': '200'}]}, {'int': '30'}]}}}], 'signature': 'sigrHfuxAAti5cVjtshULzF7v4kH3g8LdVKt9CWwZEhj8cKKWYTtkwYcm8HQPPAfYcR2i6WVNeKJtJ7fgRbfSK5sFaUVQS7J'}
2021-06-13 23:51:37.375 | DEBUG    | src.market:get_storage:340 - Querrying storage for market: 8662788755688175832
2021-06-13 23:51:42.004 | DEBUG    | src.utils:log_and_submit:206 - {'ledger_map': {'lily': {'no_token': 200, 'yes_token': 593, 'pool_liquidity': 0, 'auction_reward': 0, 'liquidity_reward': 0}}, 'liquidity_provider_map': {}, 'market_map': {'metadata': {'ipfs_hash': 'VDSFH35EU9VDP7GAH', 'description': 'Question: KTP3LWTOJ0RTVMLNK Answer: T0AE7QZDLGV6V5L7V', 'adjudicator': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'currency': {'fa12': 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'}}, 'state': {'marketBootstrapped': {'currency_pool': {'auction_reward_currency_pool': 8, 'liquidity_reward_currency_pool': 32, 'market_currency_pool': 760}, 'bootstrap_yes_probability': 6403374867416970695, 'bootstrapped_at_block': 144, 'liquidity_reward_supply_updated_at_block': 144, 'resolution': None}}}, 'supply_map': {'no_token': {'total_supply': 800, 'in_reserve': 188}, 'yes_token': {'total_supply': 800, 'in_reserve': 0}, 'pool_liquidity': {'total_supply': 138, 'in_reserve': 138}, 'auction_reward': {'total_supply': 400, 'in_reserve': 400}, 'liquidity_reward': 0}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:42.037 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046511104
2021-06-13 23:51:42.037 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 9.225171
2021-06-13 23:51:42.038 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
____________________ test_swap_token_token_in_auction_phase ____________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1LQn3AuoxRVwBsb3rVLQ56nRvC3JqNgVxR', 'name': 'palu', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_swap_token_token_in_auction_phase(market, revealed_account):
        auction = get_random_market(["bidded"])
        transaction = market.swap_tokens(auction['id'], revealed_account['name'], "yes", 100, 5)
        with pytest.raises(RpcError, match=r'Market not bootstrapped'):
>           log_and_submit(
                transaction, revealed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:483: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43a85f40>

Properties
.key		tz1LQn3AuoxRVwBsb3rVLQ56nRvC3JqNgV...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1LQn3AuoxRVwBsb3rVLQ56nRvC3JqNgVxR', 'name': 'palu', 'status': 'created,tezzed,financed,revealed,revealed'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 1799233118194804305
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43a85f40>

Properties
.key		tz1LQn3AuoxRVwBsb3rVLQ56nRvC3JqNgV...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43a85f40>

Properties
.key		tz1LQn3AuoxRVwBsb3rVLQ56nRvC3JqNgV...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43a85f40>

Properties
.key		tz1LQn3AuoxRVwBsb3rVLQ56nRvC3JqNgV...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43967b50>

Properties
.key		tz1LQn3AuoxRVwBsb3rVLQ56nRvC3JqNgV...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '66', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104312', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 143,
E             'with': {'string': 'Not enough balance in source account'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1LQn3AuoxRVwBsb3rVLQ56nRvC3JqNgVxR', 'name': 'palu', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_swap_token_token_in_auction_phase(market, revealed_account):
        auction = get_random_market(["bidded"])
        transaction = market.swap_tokens(auction['id'], revealed_account['name'], "yes", 100, 5)
        with pytest.raises(RpcError, match=r'Market not bootstrapped'):
>           log_and_submit(
                transaction, revealed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'Market not bootstrapped' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 143,\n  'with': {'string': 'Not enough balance in source account'}},)".

tests/test_integration.py:483: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:42.050 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_swap_token_token_in_auction_phase>>-----------------------------
2021-06-13 23:51:42.087 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'palu', 'key': 'tz1LQn3AuoxRVwBsb3rVLQ56nRvC3JqNgVxR', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:51:42.087 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046511104
2021-06-13 23:51:42.088 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 19.546874
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:42.089 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 1799233118194804305, 'caller': {'name': 'nina', 'key': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620926.219524, 'status': 'bidded'}
2021-06-13 23:51:42.098 | DEBUG    | src.utils:log_and_submit:193 - 1799233118194804305 tz1LQn3AuoxRVwBsb3rVLQ56nRvC3JqNgVxR swapTokens {'prim': 'Pair', 'args': [{'prim': 'Right', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '1799233118194804305'}, {'int': '100'}]}, {'int': '5'}]}
2021-06-13 23:51:42.225 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 143, 'with': {'string': 'Not enough balance in source account'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:42.326 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046511104
2021-06-13 23:51:42.326 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 19.546874
2021-06-13 23:51:42.326 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
________________ test_swap_tokens_insufficient_currency_balance ________________

market = <src.market.Market object at 0x7faf46555df0>
non_financed_account = {'key': 'tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwBP1', 'name': 'mia', 'status': 'created'}

    def test_swap_tokens_insufficient_currency_balance(market, non_financed_account):
        auction = get_random_market(["cleared"])
        transaction = market.swap_tokens(auction['id'], non_financed_account['name'], "yes", 100, 5)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, non_financed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:510: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43b618b0>

Properties
.key		tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwB...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwBP1', 'name': 'mia', 'status': 'created'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 6332227552769527182
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43b618b0>

Properties
.key		tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwB...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43b618b0>

Properties
.key		tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwB...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43b618b0>

Properties
.key		tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwB...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf436b24f0>

Properties
.key		tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwB...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '62', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104313', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 263,
E             'with': {'string': 'Market has already been resolved'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
non_financed_account = {'key': 'tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwBP1', 'name': 'mia', 'status': 'created'}

    def test_swap_tokens_insufficient_currency_balance(market, non_financed_account):
        auction = get_random_market(["cleared"])
        transaction = market.swap_tokens(auction['id'], non_financed_account['name'], "yes", 100, 5)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, non_financed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 263,\n  'with': {'string': 'Market has already been resolved'}},)".

tests/test_integration.py:510: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
the activation is not valid, the account does not have any tez
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:42.718 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_swap_tokens_insufficient_currency_balance>>-----------------------------
2021-06-13 23:51:42.755 | INFO     | tests.conftest:non_financed_account:231 - acount used for the call: {'name': 'mia', 'key': 'tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwBP1', 'status': 'created'}
2021-06-13 23:51:42.806 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'contract': 'tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwBP1', 'id': 'proto.008-PtEdo2Zk.contract.previously_revealed_key', 'kind': 'branch'}
2021-06-13 23:51:42.806 | INFO     | tests.conftest:non_financed_account:237 - account stablecoin balance before call: 0
2021-06-13 23:51:42.806 | INFO     | tests.conftest:non_financed_account:238 - account tez balance before call: 19.779453
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:42.808 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 6332227552769527182, 'caller': {'name': 'xenia', 'key': 'tz1L5nZbXTV46KGVB4gRVNQ4RWxYoq3jLn1R', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620928.357062, 'status': 'cleared'}
2021-06-13 23:51:42.819 | DEBUG    | src.utils:log_and_submit:193 - 6332227552769527182 tz1Lc4SKZLFriSm8ouwyUo3Hxkbv35VxwBP1 swapTokens {'prim': 'Pair', 'args': [{'prim': 'Right', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '6332227552769527182'}, {'int': '100'}]}, {'int': '5'}]}
2021-06-13 23:51:42.949 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 263, 'with': {'string': 'Market has already been resolved'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:43.049 | INFO     | tests.conftest:non_financed_account:240 - account stablecoin balance after call: 0
2021-06-13 23:51:43.049 | INFO     | tests.conftest:non_financed_account:241 - account tez balance before call: 19.779453
2021-06-13 23:51:43.050 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
________________________ test_add_liquidity_on_cleared _________________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5yJ3', 'name': 'mala', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_add_liquidity_on_cleared(market, revealed_account):
        quantity = 100
        auction = get_random_market(["cleared"])
        transaction = market.update_liquidity(auction['id'], revealed_account['name'], "payIn", quantity, quantity, quantity)
>       log_and_submit(transaction, revealed_account, market, auction["id"], error_func=raise_error)

tests/test_integration.py:524: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils.py:201: in log_and_submit
    result = submit_transaction(transaction, error_func=error_func)
src/utils.py:109: in submit_transaction
    return error_func(err_message)
src/utils.py:86: in submit_transaction
    transaction_ = transaction.autofill(ttl=60, counter=count)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf439d2370>

Properties
.key		tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5y...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43951880>

Properties
.key		tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5y...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '68', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104316', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 154,
E             'with': {'string': 'Slippage exceeded, aborting transaction'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:43.061 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_add_liquidity_on_cleared>>-----------------------------
2021-06-13 23:51:43.104 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'mala', 'key': 'tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5yJ3', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:51:43.105 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046510104
2021-06-13 23:51:43.105 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 29.308145
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:43.106 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 8518210901708702987, 'caller': {'name': 'lily', 'key': 'tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho', 'status': 'created,tezzed,financed,revealed'}, 'end': 1623620923.175237, 'status': 'cleared'}
2021-06-13 23:51:43.121 | DEBUG    | src.utils:log_and_submit:193 - 8518210901708702987 tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5yJ3 swapLiquidity {'prim': 'Pair', 'args': [{'prim': 'Pair', 'args': [{'prim': 'Left', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '8518210901708702987'}, {'int': '100'}]}]}, {'prim': 'Pair', 'args': [{'int': '100'}, {'int': '100'}]}]}
2021-06-13 23:51:43.122 | DEBUG    | src.market:get_storage:340 - Querrying storage for market: 8518210901708702987
2021-06-13 23:51:47.652 | DEBUG    | src.utils:log_and_submit:198 - {'ledger_map': {}, 'liquidity_provider_map': {}, 'market_map': {'metadata': {'ipfs_hash': 'ATBSS7PTXGDEWUBRT', 'description': 'Question: XW9UC0EC0QA03JURR Answer: 6E8UUYW1483NB1G7F', 'adjudicator': 'tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho', 'currency': {'fa12': 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'}}, 'state': {'marketBootstrapped': {'currency_pool': {'auction_reward_currency_pool': 8, 'liquidity_reward_currency_pool': 35, 'market_currency_pool': 848}, 'bootstrap_yes_probability': 129356627248313636, 'bootstrapped_at_block': 140, 'liquidity_reward_supply_updated_at_block': 140, 'resolution': None}}}, 'supply_map': {'no_token': {'total_supply': 891, 'in_reserve': 885}, 'yes_token': {'total_supply': 891, 'in_reserve': 0}, 'pool_liquidity': {'total_supply': 6, 'in_reserve': 6}, 'auction_reward': {'total_supply': 891, 'in_reserve': 891}, 'liquidity_reward': 0}}
2021-06-13 23:51:47.786 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 154, 'with': {'string': 'Slippage exceeded, aborting transaction'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:48.091 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046510104
2021-06-13 23:51:48.091 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 29.308145
2021-06-13 23:51:48.092 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
_____________________ test_add_liquidity_in_auction_phase ______________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'name': 'patoch', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_add_liquidity_in_auction_phase(market, revealed_account):
        auction = get_random_market(["bidded"])
        transaction = market.update_liquidity(auction['id'], revealed_account['name'], "payIn", 100, 100, 100)
        with pytest.raises(RpcError, match=r'Market has already been resolved'):
>           log_and_submit(
                transaction, revealed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:548: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf437e9550>

Properties
.key		tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckb...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'name': 'patoch', 'status': 'created,tezzed,financed,revealed,revealed'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 3546666219140105927
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf437e9550>

Properties
.key		tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckb...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf437e9550>

Properties
.key		tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckb...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf437e9550>

Properties
.key		tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckb...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf438603d0>

Properties
.key		tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckb...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '135', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104316', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 718,
E             'with': {'string': 'Market not bootstrapped'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'name': 'patoch', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_add_liquidity_in_auction_phase(market, revealed_account):
        auction = get_random_market(["bidded"])
        transaction = market.update_liquidity(auction['id'], revealed_account['name'], "payIn", 100, 100, 100)
        with pytest.raises(RpcError, match=r'Market has already been resolved'):
>           log_and_submit(
                transaction, revealed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'Market has already been resolved' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 718,\n  'with': {'string': 'Market not bootstrapped'}},)".

tests/test_integration.py:548: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:48.105 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_add_liquidity_in_auction_phase>>-----------------------------
2021-06-13 23:51:48.148 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'patoch', 'key': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:51:48.148 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046511104
2021-06-13 23:51:48.149 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 19.444355
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:48.150 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 3546666219140105927, 'caller': {'name': 'tang', 'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620923.73542, 'status': 'bidded'}
2021-06-13 23:51:48.163 | DEBUG    | src.utils:log_and_submit:193 - 3546666219140105927 tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB swapLiquidity {'prim': 'Pair', 'args': [{'prim': 'Pair', 'args': [{'prim': 'Left', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '3546666219140105927'}, {'int': '100'}]}]}, {'prim': 'Pair', 'args': [{'int': '100'}, {'int': '100'}]}]}
2021-06-13 23:51:48.322 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 718, 'with': {'string': 'Market not bootstrapped'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:48.423 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046511104
2021-06-13 23:51:48.424 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 19.444355
2021-06-13 23:51:48.424 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
_______________ test_add_liquidity_insufficient_currency_balance _______________

market = <src.market.Market object at 0x7faf46555df0>
non_financed_account = {'key': 'tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9iU', 'name': 'robin', 'status': 'created'}

    def test_add_liquidity_insufficient_currency_balance(market, non_financed_account):
        auction = get_random_market(["cleared"])
        transaction = market.update_liquidity(auction['id'], non_financed_account['name'], "payIn", 100, 100, 100)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, non_financed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:574: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf439fc310>

Properties
.key		tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9iU', 'name': 'robin', 'status': 'created'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 9150991295688725621
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf439fc310>

Properties
.key		tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf439fc310>

Properties
.key		tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf439fc310>

Properties
.key		tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43676f70>

Properties
.key		tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '60', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104316', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 154,
E             'with': {'string': 'Slippage exceeded, aborting transaction'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
non_financed_account = {'key': 'tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9iU', 'name': 'robin', 'status': 'created'}

    def test_add_liquidity_insufficient_currency_balance(market, non_financed_account):
        auction = get_random_market(["cleared"])
        transaction = market.update_liquidity(auction['id'], non_financed_account['name'], "payIn", 100, 100, 100)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, non_financed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 154,\n  'with': {'string': 'Slippage exceeded, aborting transaction'}},)".

tests/test_integration.py:574: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
the activation is not valid, the account does not have any tez
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:48.819 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_add_liquidity_insufficient_currency_balance>>-----------------------------
2021-06-13 23:51:48.856 | INFO     | tests.conftest:non_financed_account:231 - acount used for the call: {'name': 'robin', 'key': 'tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9iU', 'status': 'created'}
2021-06-13 23:51:48.902 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'contract': 'tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9iU', 'id': 'proto.008-PtEdo2Zk.contract.previously_revealed_key', 'kind': 'branch'}
2021-06-13 23:51:48.902 | INFO     | tests.conftest:non_financed_account:237 - account stablecoin balance before call: 0
2021-06-13 23:51:48.902 | INFO     | tests.conftest:non_financed_account:238 - account tez balance before call: 19.999632
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:48.903 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 9150991295688725621, 'caller': {'name': 'marty', 'key': 'tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE7u', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620923.462149, 'status': 'cleared'}
2021-06-13 23:51:48.913 | DEBUG    | src.utils:log_and_submit:193 - 9150991295688725621 tz1XRcA64rrepjkDgJudqjk7Z5HyALk8u9iU swapLiquidity {'prim': 'Pair', 'args': [{'prim': 'Pair', 'args': [{'prim': 'Left', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '9150991295688725621'}, {'int': '100'}]}]}, {'prim': 'Pair', 'args': [{'int': '100'}, {'int': '100'}]}]}
2021-06-13 23:51:49.044 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 154, 'with': {'string': 'Slippage exceeded, aborting transaction'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:49.154 | INFO     | tests.conftest:non_financed_account:240 - account stablecoin balance after call: 0
2021-06-13 23:51:49.155 | INFO     | tests.conftest:non_financed_account:241 - account tez balance before call: 19.999632
2021-06-13 23:51:49.155 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
_______________________ test_remove_liquidity_on_cleared _______________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'name': 'nina', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_remove_liquidity_on_cleared(market, revealed_account):
        quantity = 100
        auction = get_random_market(["cleared"])
        transaction = market.update_liquidity(auction['id'], revealed_account['name'], "payIn", quantity, quantity, quantity)
>       log_and_submit(transaction, revealed_account, market, auction["id"], error_func=raise_error, logging=False)

tests/test_integration.py:588: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils.py:201: in log_and_submit
    result = submit_transaction(transaction, error_func=error_func)
src/utils.py:109: in submit_transaction
    return error_func(err_message)
src/utils.py:86: in submit_transaction
    transaction_ = transaction.autofill(ttl=60, counter=count)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43bcf160>

Properties
.key		tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43bcf820>

Properties
.key		tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '73', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104315', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 154,
E             'with': {'string': 'Slippage exceeded, aborting transaction'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:49.168 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_remove_liquidity_on_cleared>>-----------------------------
2021-06-13 23:51:49.207 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'nina', 'key': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:51:49.207 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046511004
2021-06-13 23:51:49.207 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 28.746475
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:49.208 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 548579840813034741, 'caller': {'name': 'mala', 'key': 'tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5yJ3', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620921.490262, 'status': 'cleared'}
2021-06-13 23:51:49.218 | DEBUG    | src.utils:log_and_submit:193 - 548579840813034741 tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B swapLiquidity {'prim': 'Pair', 'args': [{'prim': 'Pair', 'args': [{'prim': 'Left', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '548579840813034741'}, {'int': '100'}]}]}, {'prim': 'Pair', 'args': [{'int': '100'}, {'int': '100'}]}]}
2021-06-13 23:51:49.367 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 154, 'with': {'string': 'Slippage exceeded, aborting transaction'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:49.441 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046511004
2021-06-13 23:51:49.442 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 28.746475
2021-06-13 23:51:49.442 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
____________________ test_remove_liquidity_in_auction_phase ____________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'name': 'tang', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_remove_liquidity_in_auction_phase(market, revealed_account):
        auction = get_random_market(["bidded"])
        transaction = market.update_liquidity(auction['id'], revealed_account['name'], "payOut", 100, 100, 100)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(transaction, revealed_account, market, auction["id"], error_func=raise_error)

tests/test_integration.py:611: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43b18310>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'name': 'tang', 'status': 'created,tezzed,financed,revealed,revealed'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 3778238334914785143
error_func = <function raise_error at 0x7faf474c3820>, logging = True

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43b18310>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43b18310>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43b18310>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf4385d040>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '72', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104315', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 506,
E             'with': {'string': 'Not enough balance in source account'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'name': 'tang', 'status': 'created,tezzed,financed,revealed,revealed'}

    def test_remove_liquidity_in_auction_phase(market, revealed_account):
        auction = get_random_market(["bidded"])
        transaction = market.update_liquidity(auction['id'], revealed_account['name'], "payOut", 100, 100, 100)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(transaction, revealed_account, market, auction["id"], error_func=raise_error)
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 506,\n  'with': {'string': 'Not enough balance in source account'}},)".

tests/test_integration.py:611: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:49.453 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_remove_liquidity_in_auction_phase>>-----------------------------
2021-06-13 23:51:49.499 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'tang', 'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:51:49.499 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046510104
2021-06-13 23:51:49.500 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 28.814436
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:49.501 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 3778238334914785143, 'caller': {'name': 'patoch', 'key': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620931.300507, 'status': 'bidded'}
2021-06-13 23:51:49.512 | DEBUG    | src.utils:log_and_submit:193 - 3778238334914785143 tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet swapLiquidity {'prim': 'Pair', 'args': [{'prim': 'Pair', 'args': [{'prim': 'Right', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '3778238334914785143'}, {'int': '100'}]}]}, {'prim': 'Pair', 'args': [{'int': '100'}, {'int': '100'}]}]}
2021-06-13 23:51:49.512 | DEBUG    | src.market:get_storage:340 - Querrying storage for market: 3778238334914785143
2021-06-13 23:51:54.011 | DEBUG    | src.utils:log_and_submit:198 - {'ledger_map': {}, 'liquidity_provider_map': {}, 'market_map': {'metadata': {'ipfs_hash': 'GVA8RKR495DRS5QXY', 'description': 'Question: OU24I0RW2DFGZ17QM Answer: R7HLI3OJR8B5ZFGG8', 'adjudicator': 'tz1itzGH43N8Y9QT1UzKJwJM8Y3qK8uckbXB', 'currency': {'fa12': 'KT1Noj1B1AHgDWGqr3L9yyuiezcJwkwFXHdE'}}, 'state': {'marketBootstrapped': {'currency_pool': {'auction_reward_currency_pool': 8, 'liquidity_reward_currency_pool': 32, 'market_currency_pool': 762}, 'bootstrap_yes_probability': 5372674215741494602, 'bootstrapped_at_block': 145, 'liquidity_reward_supply_updated_at_block': 145, 'resolution': None}}}, 'supply_map': {'no_token': {'total_supply': 802, 'in_reserve': 473}, 'yes_token': {'total_supply': 802, 'in_reserve': 0}, 'pool_liquidity': {'total_supply': 233, 'in_reserve': 233}, 'auction_reward': {'total_supply': 802, 'in_reserve': 802}, 'liquidity_reward': 0}}
2021-06-13 23:51:54.173 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 506, 'with': {'string': 'Not enough balance in source account'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:54.277 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046510104
2021-06-13 23:51:54.277 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 28.814436
2021-06-13 23:51:54.278 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
_____________ test_remove_liquidity_insufficient_currency_balance ______________

market = <src.market.Market object at 0x7faf46555df0>
non_financed_account = {'key': 'tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvToub', 'name': 'sergio', 'status': 'created'}

    def test_remove_liquidity_insufficient_currency_balance(market, non_financed_account):
        auction = get_random_market(["cleared"])
        transaction = market.update_liquidity(auction['id'], non_financed_account['name'], "payOut", 100, 100, 100)
        with pytest.raises(RpcError, match=r'Not enough balance in source account'):
>           log_and_submit(
                transaction, non_financed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:635: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf438ccc70>

Properties
.key		tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvTo...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvToub', 'name': 'sergio', 'status': 'created'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 3931615637262326457
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf438ccc70>

Properties
.key		tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvTo...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf438ccc70>

Properties
.key		tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvTo...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf438ccc70>

Properties
.key		tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvTo...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf436d0490>

Properties
.key		tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvTo...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
>       opg_with_metadata = opg.run()

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf436d0490>

Properties
.key		tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvTo...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
block_id = 'head'

    def run(self, block_id: str = 'head'):
        """Simulate operation without signature checks.
    
        :param block_id: Specify a level at which this operation should be applied (default is head)
        :returns: RPC response from `run_operation`
        """
>       return self.shell.blocks[block_id].helpers.scripts.run_operation.post(
            {
                'operation': {
                    'branch': self.branch,
                    'contents': self.contents,
                    'signature': base58_encode(b'0' * 64, b'sig').decode(),
                },
                'chain_id': self.chain_id,
            }
        )

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.rpc.helpers.ScriptsRunOperationQuery object at 0x7faf43c4b4f0>

Properties
.path	/chains/main/blocks/head/hel...specific
"signature": <Base58 encoded>
}

:param operation: JSON input
:returns: JSON object (operation with metadata)

operation = {'chain_id': 'NetXnuwTfg9Box8', 'operation': {'branch': 'BMNeJ5PYaAxxcYgi9riz2mb59waot7Eb5s2WQoLQLSpyKR29h3w', 'conten.....}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}}

    def post(self, operation):
        """Run an operation without signature checks.
    
        operation format:
    
        .. code-block:: python
    
            {
                "branch": <block_hash>,
                "contents": [ {} ... ],  // kind-specific
                "signature": <Base58 encoded>
            }
    
        :param operation: JSON input
        :returns: JSON object (operation with metadata)
        """
>       return self._post(json=operation)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/rpc/helpers.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.rpc.helpers.ScriptsRunOperationQuery object at 0x7faf43c4b4f0>

Properties
.path	/chains/main/blocks/head/hel...specific
"signature": <Base58 encoded>
}

:param operation: JSON input
:returns: JSON object (operation with metadata)

json = {'chain_id': 'NetXnuwTfg9Box8', 'operation': {'branch': 'BMNeJ5PYaAxxcYgi9riz2mb59waot7Eb5s2WQoLQLSpyKR29h3w', 'conten.....}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}}
params = None

    def _post(self, json=None, params=None):
>       return self.node.post(
            path=self.path,
            params=params,
            json=json
        )

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/rpc/query.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.rpc.node.RpcNode object at 0x7faf46830cd0>

Node address
http://localhost:20000
path = '/chains/main/blocks/head/helpers/scripts/run_operation', params = None
json = {'chain_id': 'NetXnuwTfg9Box8', 'operation': {'branch': 'BMNeJ5PYaAxxcYgi9riz2mb59waot7Eb5s2WQoLQLSpyKR29h3w', 'conten.....}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}}

    def post(self, path: str, params: Optional[Dict[str, Any]] = None, json=None) -> Union[requests.Response, str]:
>       response = self.request('POST', path, params=params, json=json)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/rpc/node.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.rpc.node.RpcNode object at 0x7faf46830cd0>

Node address
http://localhost:20000
method = 'POST', path = '/chains/main/blocks/head/helpers/scripts/run_operation'
kwargs = {'json': {'chain_id': 'NetXnuwTfg9Box8', 'operation': {'branch': 'BMNeJ5PYaAxxcYgi9riz2mb59waot7Eb5s2WQoLQLSpyKR29h3w'...: 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}}, 'params': None}
res = <Response [500]>

    def request(self, method: str, path: str, **kwargs) -> requests.Response:
        """Perform HTTP request to node.
    
        :param method: one of GET/POST/PUT/DELETE
        :param path: path to endpoint
        :param kwargs: requests.request arguments
        :raises RpcError: node has returned an error
        :returns: node response
        """
        logger.debug('>>>>> %s %s\n%s', method, path, json.dumps(kwargs, indent=4))
        res = self._session.request(
            method=method,
            url=_urljoin(self.uri[0], path),
            headers={
                'content-type': 'application/json',
                'user-agent': 'PyTezos',
            },
            **kwargs,
        )
        if res.status_code == 404:
            logger.debug('<<<<< %s\n%s', res.status_code, res.text)
            raise RpcError(f'Not found: {path}')
        if res.status_code != 200:
            logger.debug('<<<<< %s\n%s', res.status_code, pformat(res.text, indent=4))
>           raise RpcError.from_response(res)
E           pytezos.rpc.node.RpcError: ({'id': 'proto.008-PtEdo2Zk.implicit.empty_implicit_contract',
E             'implicit': 'tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvToub',
E             'kind': 'branch'},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/rpc/node.py:130: RpcError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
non_financed_account = {'key': 'tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvToub', 'name': 'sergio', 'status': 'created'}

    def test_remove_liquidity_insufficient_currency_balance(market, non_financed_account):
        auction = get_random_market(["cleared"])
        transaction = market.update_liquidity(auction['id'], non_financed_account['name'], "payOut", 100, 100, 100)
        with pytest.raises(RpcError, match=r'Not enough balance in source account'):
>           log_and_submit(
                transaction, non_financed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'Not enough balance in source account' does not match "({'id': 'proto.008-PtEdo2Zk.implicit.empty_implicit_contract',\n  'implicit': 'tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvToub',\n  'kind': 'branch'},)".

tests/test_integration.py:635: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:51:54.675 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_remove_liquidity_insufficient_currency_balance>>-----------------------------
2021-06-13 23:51:54.712 | INFO     | tests.conftest:non_financed_account:231 - acount used for the call: {'name': 'sergio', 'key': 'tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvToub', 'status': 'created'}
2021-06-13 23:51:54.736 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.operation.invalid_activation', 'kind': 'permanent', 'pkh': 'tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvToub'}
2021-06-13 23:51:54.736 | INFO     | tests.conftest:non_financed_account:236 - Non financed account: {'name': 'sergio', 'key': 'tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvToub', 'status': 'created'} already available on the network
2021-06-13 23:51:54.736 | INFO     | tests.conftest:non_financed_account:237 - account stablecoin balance before call: 0
2021-06-13 23:51:54.736 | INFO     | tests.conftest:non_financed_account:238 - account tez balance before call: 0.000000
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:51:54.738 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 3931615637262326457, 'caller': {'name': 'nina', 'key': 'tz1ZJARU2TodXW8cFhYuai3VmLpY1qqkHq9B', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620929.839046, 'status': 'cleared'}
2021-06-13 23:51:54.747 | DEBUG    | src.utils:log_and_submit:193 - 3931615637262326457 tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvToub swapLiquidity {'prim': 'Pair', 'args': [{'prim': 'Pair', 'args': [{'prim': 'Right', 'args': [{'prim': 'Unit'}]}, {'prim': 'Pair', 'args': [{'int': '3931615637262326457'}, {'int': '100'}]}]}, {'prim': 'Pair', 'args': [{'int': '100'}, {'int': '100'}]}]}
2021-06-13 23:51:54.791 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.implicit.empty_implicit_contract', 'implicit': 'tz1gK1rZy2Biut8hcJiyEufbtXQ9rkNvToub', 'kind': 'branch'}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:51:55.149 | INFO     | tests.conftest:non_financed_account:240 - account stablecoin balance after call: 0
2021-06-13 23:51:55.150 | INFO     | tests.conftest:non_financed_account:241 - account tez balance before call: 0.000000
2021-06-13 23:51:55.150 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
________________ test_resolve_market_unauthorized_account[True] ________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE7u', 'name': 'marty', 'status': 'created,tezzed,financed,revealed,revealed'}
token_type = True

    @pytest.mark.parametrize('token_type', [True, False])
    def test_resolve_market_unauthorized_account(market, revealed_account, token_type):
        auction = get_random_market(["cleared"])
        transaction = market.close_market(auction['id'], revealed_account['name'], token_type)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, revealed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43567460>

Properties
.key		tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE7u', 'name': 'marty', 'status': 'created,tezzed,financed,revealed,revealed'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 1429943440204564840
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43567460>

Properties
.key		tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43567460>

Properties
.key		tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43567460>

Properties
.key		tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf437479a0>

Properties
.key		tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '76', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104300', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 343,
E             'with': {'string': 'Access denied: unauthorized caller'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE7u', 'name': 'marty', 'status': 'created,tezzed,financed,revealed,revealed'}
token_type = True

    @pytest.mark.parametrize('token_type', [True, False])
    def test_resolve_market_unauthorized_account(market, revealed_account, token_type):
        auction = get_random_market(["cleared"])
        transaction = market.close_market(auction['id'], revealed_account['name'], token_type)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, revealed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 343,\n  'with': {'string': 'Access denied: unauthorized caller'}},)".

tests/test_integration.py:689: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:52:41.978 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_resolve_market_unauthorized_account[True]>>-----------------------------
2021-06-13 23:52:42.015 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'marty', 'key': 'tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE7u', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:52:42.015 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046511104
2021-06-13 23:52:42.015 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 28.555244
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:52:42.016 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 1429943440204564840, 'caller': {'name': 'tang', 'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620928.308036, 'status': 'cleared'}
2021-06-13 23:52:42.026 | DEBUG    | src.utils:log_and_submit:193 - 1429943440204564840 tz1Q3eT3kwr1hfvK49HK8YqPadNXzxdxnE7u marketResolve {'prim': 'Pair', 'args': [{'int': '1429943440204564840'}, {'prim': 'Right', 'args': [{'prim': 'Unit'}]}]}
2021-06-13 23:52:42.155 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 343, 'with': {'string': 'Access denied: unauthorized caller'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:52:42.250 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046511104
2021-06-13 23:52:42.250 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 28.555244
2021-06-13 23:52:42.251 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
_______________ test_resolve_market_unauthorized_account[False] ________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'name': 'romina', 'status': 'created,tezzed,financed,revealed'}
token_type = False

    @pytest.mark.parametrize('token_type', [True, False])
    def test_resolve_market_unauthorized_account(market, revealed_account, token_type):
        auction = get_random_market(["cleared"])
        transaction = market.close_market(auction['id'], revealed_account['name'], token_type)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, revealed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )

tests/test_integration.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43672a60>

Properties
.key		tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'name': 'romina', 'status': 'created,tezzed,financed,revealed'}
market = <src.market.Market object at 0x7faf46555df0>
market_id = 5092522129523100870
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43672a60>

Properties
.key		tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43672a60>

Properties
.key		tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43672a60>

Properties
.key		tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf436726d0>

Properties
.key		tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '75', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104301', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 343,
E             'with': {'string': 'Access denied: unauthorized caller'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'name': 'romina', 'status': 'created,tezzed,financed,revealed'}
token_type = False

    @pytest.mark.parametrize('token_type', [True, False])
    def test_resolve_market_unauthorized_account(market, revealed_account, token_type):
        auction = get_random_market(["cleared"])
        transaction = market.close_market(auction['id'], revealed_account['name'], token_type)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(
                transaction, revealed_account, market, auction["id"], error_func=raise_error, logging=LOGGING_RAISE
            )
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 343,\n  'with': {'string': 'Access denied: unauthorized caller'}},)".

tests/test_integration.py:689: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:52:42.262 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_resolve_market_unauthorized_account[False]>>-----------------------------
2021-06-13 23:52:42.299 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'romina', 'key': 'tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t', 'status': 'created,tezzed,financed,revealed'}
2021-06-13 23:52:42.300 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046511104
2021-06-13 23:52:42.300 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 28.763223
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:52:42.301 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 5092522129523100870, 'caller': {'name': 'mala', 'key': 'tz1azKk3gBJRjW11JAh8J1CBP1tF2NUu5yJ3', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620931.557495, 'status': 'cleared'}
2021-06-13 23:52:42.311 | DEBUG    | src.utils:log_and_submit:193 - 5092522129523100870 tz1iFcpVuaBCaffFNG8LZKJrQdzzj7c5uW3t marketResolve {'prim': 'Pair', 'args': [{'int': '5092522129523100870'}, {'prim': 'Left', 'args': [{'prim': 'Unit'}]}]}
2021-06-13 23:52:42.439 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 343, 'with': {'string': 'Access denied: unauthorized caller'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:52:42.539 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046511104
2021-06-13 23:52:42.539 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 28.763223
2021-06-13 23:52:42.539 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
__________________ test_resolve_non_existent_market_id[True] ___________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'name': 'tang', 'status': 'created,tezzed,financed,revealed,revealed'}
token_type = True

    @pytest.mark.parametrize('token_type', [True, False])
    def test_resolve_non_existent_market_id(market, revealed_account, token_type):
        transaction = market.close_market(1, revealed_account['name'], token_type)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(transaction, revealed_account, market, 1, error_func=raise_error, logging=LOGGING_RAISE)

tests/test_integration.py:698: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43c73e50>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'name': 'tang', 'status': 'created,tezzed,financed,revealed,revealed'}
market = <src.market.Market object at 0x7faf46555df0>, market_id = 1
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43c73e50>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43c73e50>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43c73e50>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43c292b0>

Properties
.key		tz1MDwHYDLgPydL5iav7eee9mZhe6gntoL...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '72', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104292', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 327,
E             'with': {'string': 'No such market'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'name': 'tang', 'status': 'created,tezzed,financed,revealed,revealed'}
token_type = True

    @pytest.mark.parametrize('token_type', [True, False])
    def test_resolve_non_existent_market_id(market, revealed_account, token_type):
        transaction = market.close_market(1, revealed_account['name'], token_type)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(transaction, revealed_account, market, 1, error_func=raise_error, logging=LOGGING_RAISE)
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 327,\n  'with': {'string': 'No such market'}},)".

tests/test_integration.py:698: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:52:42.553 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_resolve_non_existent_market_id[True]>>-----------------------------
2021-06-13 23:52:42.591 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'tang', 'key': 'tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet', 'status': 'created,tezzed,financed,revealed,revealed'}
2021-06-13 23:52:42.591 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046510104
2021-06-13 23:52:42.591 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 28.814436
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:52:42.603 | DEBUG    | src.utils:log_and_submit:193 - 1 tz1MDwHYDLgPydL5iav7eee9mZhe6gntoLet marketResolve {'prim': 'Pair', 'args': [{'int': '1'}, {'prim': 'Right', 'args': [{'prim': 'Unit'}]}]}
2021-06-13 23:52:42.734 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 327, 'with': {'string': 'No such market'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:52:42.832 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046510104
2021-06-13 23:52:42.832 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 28.814436
2021-06-13 23:52:42.833 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
__________________ test_resolve_non_existent_market_id[False] __________________

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho', 'name': 'lily', 'status': 'created,tezzed,financed,revealed'}
token_type = False

    @pytest.mark.parametrize('token_type', [True, False])
    def test_resolve_non_existent_market_id(market, revealed_account, token_type):
        transaction = market.close_market(1, revealed_account['name'], token_type)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(transaction, revealed_account, market, 1, error_func=raise_error, logging=LOGGING_RAISE)

tests/test_integration.py:698: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43bd43a0>

Properties
.key		tz1bCwYgZcTQwLERvXS9UZghffENphBsEc...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
account = {'key': 'tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho', 'name': 'lily', 'status': 'created,tezzed,financed,revealed'}
market = <src.market.Market object at 0x7faf46555df0>, market_id = 1
error_func = <function raise_error at 0x7faf474c3820>, logging = False

    def log_and_submit(transaction, account, market=None, market_id=None, error_func=raise_error, logging=True):
        payload_parameters = transaction.json_payload()['contents'][0]['parameters']
        entrypoint = payload_parameters['entrypoint']
        params = payload_parameters['value']
        logger.debug(f"{market_id} {account['key']} {entrypoint} {params}")
        before_storage, after_storage = None, None
        if market is not None and logging is True:
            try:
                before_storage = market.get_storage(market_id, account['name'])
                logger.debug(f"{before_storage}")
            except Exception as e:
                logger.debug(f"storage is not accessible before submit transaction: {e}")
>       result = submit_transaction(transaction, error_func=error_func)

src/utils.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43bd43a0>

Properties
.key		tz1bCwYgZcTQwLERvXS9UZghffENphBsEc...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
            transaction_ = transaction.autofill(ttl=60, counter=count)
            res = transaction_.sign().inject(_async=False)
            if hasattr(sys, '_called_from_test'):
                client.bake_block().fill().work().sign().inject()
            else:
                client.bake_block().fill().work().sign().inject()
                #block_hash = transaction_.shell.wait_next_block(max_iterations=10)
                #logger.debug(f"block baked: {block_hash}")
            return res
        except RpcError as r:
            err_message = ast.literal_eval(str(r)[1:-2])
            if 'id' in err_message and tries >= 0:
                tries = tries - 1
                if 'counter_in_the_past' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
                elif 'counter_in_the_future' in err_message['id']:
                    if 'expected' in err_message:
                        count = int(err_message['expected'])
                    return submit_transaction(transaction, count=count, tries=tries, error_func=error_func)
            logger.debug(f"the transaction couldn't be injected because of {err_message}")
            if error_func is not None:
>               return error_func(err_message)

src/utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

transaction = <pytezos.operation.group.OperationGroup object at 0x7faf43bd43a0>

Properties
.key		tz1bCwYgZcTQwLERvXS9UZghffENphBsEc...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
count = None, tries = 2, error_func = <function raise_error at 0x7faf474c3820>

    def submit_transaction(transaction, count=None, tries=3, error_func=None):
        """
        Submit a transaction
        """
        try:
>           transaction_ = transaction.autofill(ttl=60, counter=count)

src/utils.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytezos.operation.group.OperationGroup object at 0x7faf43bd43a0>

Properties
.key		tz1bCwYgZcTQwLERvXS9UZghffENphBsEc...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
gas_reserve = 100, burn_reserve = 100, counter = None, ttl = 60, fee = None
gas_limit = None, storage_limit = None, kwargs = {}
opg = <pytezos.operation.group.OperationGroup object at 0x7faf43bd49d0>

Properties
.key		tz1bCwYgZcTQwLERvXS9UZghffENphBsEc...sals()
.result()
.reveal()
.run()
.run_operation()
.seed_nonce_revelation()
.send()
.sign()
.transaction()
.with_slot()
opg_with_metadata = {'contents': [{'amount': '0', 'counter': '440', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'fee': '104293', ...}], 'signature': 'sigUHx32f9wesZ1n2BWpixXz4AQaZggEtchaQNHYGRCoWNAXx45WGW2ua3apUUUAGMLPwAU41QoaFCzVSL61VaessLg4YbbP'}

    def autofill(
        self,
        gas_reserve: int = DEFAULT_GAS_RESERVE,
        burn_reserve: int = DEFAULT_BURN_RESERVE,
        counter: Optional[int] = None,
        ttl: Optional[int] = None,
        fee: Optional[int] = None,
        gas_limit: Optional[int] = None,
        storage_limit: Optional[int] = None,
        **kwargs,
    ) -> 'OperationGroup':
        """Fill the gaps and then simulate the operation in order to calculate fee, gas/storage limits.
    
        :param gas_reserve: Add a safe reserve for dynamically calculated gas limit (default is 100).
        :param burn_reserve: Add a safe reserve for dynamically calculated storage limit (default is 100).
        :param counter: Override counter value (for manual handling)
        :param ttl: Number of blocks to wait in the mempool before removal (default is 5 for public network, 60 for sandbox)
        :param fee: Explicitly set fee for operation. If not set fee will be calculated depending on results of operation dry-run.
        :param gas_limit: Explicitly set gas limit for operation. If not set gas limit will be calculated depending on results of
            operation dry-run.
        :param storage_limit: Explicitly set storage limit for operation. If not set storage limit will be calculated depending on
            results of operation dry-run.
        :rtype: OperationGroup
        """
        if kwargs.get('branch_offset') is not None:
            logger.warning('`branch_offset` argument is deprecated, use `ttl` instead')
            ttl = MAX_OPERATIONS_TTL - kwargs['branch_offset']
    
        opg = self.fill(counter=counter, ttl=ttl)
        opg_with_metadata = opg.run()
        if not OperationResult.is_applied(opg_with_metadata):
>           raise RpcError.from_errors(OperationResult.errors(opg_with_metadata))
E           pytezos.rpc.errors.MichelsonError: ({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',
E             'kind': 'temporary',
E             'location': 327,
E             'with': {'string': 'No such market'}},)

/home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/pytezos/operation/group.py:224: MichelsonError

During handling of the above exception, another exception occurred:

market = <src.market.Market object at 0x7faf46555df0>
revealed_account = {'key': 'tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho', 'name': 'lily', 'status': 'created,tezzed,financed,revealed'}
token_type = False

    @pytest.mark.parametrize('token_type', [True, False])
    def test_resolve_non_existent_market_id(market, revealed_account, token_type):
        transaction = market.close_market(1, revealed_account['name'], token_type)
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(transaction, revealed_account, market, 1, error_func=raise_error, logging=LOGGING_RAISE)
E           AssertionError: Regex pattern 'not today satan' does not match "({'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected',\n  'kind': 'temporary',\n  'location': 327,\n  'with': {'string': 'No such market'}},)".

tests/test_integration.py:698: AssertionError
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:52:42.845 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_resolve_non_existent_market_id[False]>>-----------------------------
2021-06-13 23:52:42.887 | INFO     | tests.conftest:revealed_account:204 - acount use for the call: {'name': 'lily', 'key': 'tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho', 'status': 'created,tezzed,financed,revealed'}
2021-06-13 23:52:42.887 | INFO     | tests.conftest:revealed_account:205 - account stablecoin balance before call: 4398046510704
2021-06-13 23:52:42.887 | INFO     | tests.conftest:revealed_account:206 - account tez balance before call: 9.174862
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:52:42.898 | DEBUG    | src.utils:log_and_submit:193 - 1 tz1bCwYgZcTQwLERvXS9UZghffENphBsEcho marketResolve {'prim': 'Pair', 'args': [{'int': '1'}, {'prim': 'Left', 'args': [{'prim': 'Unit'}]}]}
2021-06-13 23:52:43.047 | DEBUG    | src.utils:submit_transaction:107 - the transaction couldn't be injected because of {'id': 'proto.008-PtEdo2Zk.michelson_v1.script_rejected', 'kind': 'temporary', 'location': 327, 'with': {'string': 'No such market'}}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:52:43.157 | INFO     | tests.conftest:revealed_account:208 - account stablecoin balance after call: 4398046510704
2021-06-13 23:52:43.157 | INFO     | tests.conftest:revealed_account:209 - account tez balance before call: 9.174862
2021-06-13 23:52:43.158 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
____________________ test_claim_winnings_unresolved_market _____________________

market = <src.market.Market object at 0x7faf46555df0>

    def test_claim_winnings_unresolved_market(market):
        auction = get_random_market('cleared')
        transaction = market.claim_winnings(auction['id'], auction['caller']['name'])
        with pytest.raises(RpcError, match=r'not today satan'):
>           log_and_submit(transaction, auction['caller'], market, auction['id'], error_func=raise_error, logging=LOGGING_RAISE)
E           Failed: DID NOT RAISE <class 'pytezos.rpc.node.RpcError'>

tests/test_integration.py:720: Failed
---------------------------- Captured stdout setup -----------------------------
mock_function
---------------------------- Captured stderr setup -----------------------------
2021-06-13 23:53:02.126 | INFO     | tests.conftest:log_contract_state:371 - -----------------------------<SubRequest 'log_contract_state' for <Function test_claim_winnings_unresolved_market>>-----------------------------
----------------------------- Captured stdout call -----------------------------
here 1623621177
da time 1623621178
da tim2 1623621182
here 1623621178
here 1623621178
here 1623621178
----------------------------- Captured stderr call -----------------------------
2021-06-13 23:53:02.128 | INFO     | tests.conftest:get_random_market:382 - selected market for test: {'id': 83006181341046644, 'caller': {'name': 'anna', 'key': 'tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt', 'status': 'created,tezzed,financed,revealed,revealed'}, 'end': 1623620926.76759, 'status': 'cleared'}
2021-06-13 23:53:02.137 | DEBUG    | src.utils:log_and_submit:193 - 83006181341046644 tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt claimWinnings {'int': '83006181341046644'}
2021-06-13 23:53:02.344 | DEBUG    | src.utils:log_and_submit:202 - Result from TRANSACTION = {'chain_id': 'NetXnuwTfg9Box8', 'hash': 'ooo6tboEeuq9qQEnEudfABWC8dhStN2JHSTicjCLpxi3DVBx75i', 'protocol': 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA', 'branch': 'BLLp47PaWvzFoD3GEoursGdQpUgpQe97Rf4XsXvDXSh2xnet5kK', 'contents': [{'kind': 'transaction', 'source': 'tz1UZFiTE2G5vxRicUeiyov5yt6Zku6fC3dt', 'fee': '8586', 'counter': '68', 'gas_limit': '82941', 'storage_limit': '578', 'amount': '0', 'destination': 'KT1Cqrsuz86GEyDQiMzKFUo1QNTr3oSnpyvp', 'parameters': {'entrypoint': 'claimWinnings', 'value': {'int': '83006181341046644'}}}], 'signature': 'sigQhxdaiuBJZ5p9Ed1PxFs9WUTrwZiPGnnPqDPLb5hrPMUc62tmnwRFYqS6n6Bg7euSB4TFSwGhDcncMnbCHMN2eXzgPrvf'}
--------------------------- Captured stderr teardown ---------------------------
2021-06-13 23:53:02.378 | INFO     | tests.conftest:log_contract_state:373 - -----------------------------END OF THE TEST-----------------------------
=============================== warnings summary ===============================
../../../../../.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/cytoolz/compatibility.py:2
  /home/killua/.cache/pypoetry/virtualenvs/prediction-market-support-mREyC6rD-py3.9/lib/python3.9/site-packages/cytoolz/compatibility.py:2: DeprecationWarning: The toolz.compatibility module is no longer needed in Python 3 and has been deprecated. Please import these utilities directly from the standard library. This module will be removed in a future release.
    warnings.warn("The toolz.compatibility module is no longer "

-- Docs: https://docs.pytest.org/en/stable/warnings.html
Profiling (from /home/killua/Documents/Projects/tezos/prediction-market-contracts/wolfram-oracle/prof/combined.prof):
Sun Jun 13 23:53:04 2021    /home/killua/Documents/Projects/tezos/prediction-market-contracts/wolfram-oracle/prof/combined.prof

         281372496 function calls (231029415 primitive calls) in 291.804 seconds

   Ordered by: cumulative time
   List reduced from 2221 to 20 due to restriction <20>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       63    0.001    0.000  291.891    4.633 runner.py:106(pytest_runtest_protocol)
       63    0.001    0.000  291.868    4.633 runner.py:114(runtestprotocol)
      189    0.003    0.000  291.867    1.544 runner.py:212(call_and_report)
 4513/719    0.017    0.000  291.856    0.406 hooks.py:272(__call__)
 4513/719    0.003    0.000  291.851    0.406 manager.py:90(_hookexec)
 4513/719    0.007    0.000  291.850    0.406 manager.py:84(<lambda>)
 4513/719    0.029    0.000  291.848    0.406 callers.py:157(_multicall)
      189    0.002    0.000  288.893    1.529 runner.py:240(call_runtest_hook)
      189    0.002    0.000  288.888    1.529 runner.py:298(from_call)
      189    0.001    0.000  288.884    1.528 runner.py:255(<lambda>)
       63    0.000    0.000  160.468    2.547 runner.py:153(pytest_runtest_call)
       63    0.000    0.000  160.466    2.547 python.py:1639(runtest)
       63    0.001    0.000  160.463    2.547 python.py:176(pytest_pyfunc_call)
       33    0.001    0.000  150.553    4.562 market.py:334(get_storage)
    18199    0.381    0.000  141.489    0.008 node.py:106(request)
       63    0.003    0.000  132.115    2.097 utils.py:189(log_and_submit)
       63    0.000    0.000  128.113    2.034 runner.py:148(pytest_runtest_setup)
       63    0.000    0.000  128.111    2.034 runner.py:436(prepare)
       63    0.000    0.000  128.110    2.033 python.py:1643(setup)
       63    0.001    0.000  128.110    2.033 pytest_lazyfixture.py:26(fill)


SVG profile in /home/killua/Documents/Projects/tezos/prediction-market-contracts/wolfram-oracle/prof/combined.svg.
============================= slowest 5 durations ==============================
125.69s setup    tests/test_integration.py::test_empty
18.74s call     tests/test_integration.py::test_swap_token_token_on_cleared[no]
13.98s call     tests/test_integration.py::test_resolve_market_in_cleared_phase[True]
13.89s call     tests/test_integration.py::test_create_market_correct_bet_success_fa12
13.83s call     tests/test_integration.py::test_resolve_market_in_cleared_phase[False]
=========================== short test summary info ============================
FAILED tests/test_integration.py::test_auction_bet_existing_address_correct_bet
FAILED tests/test_integration.py::test_auction_bet_insufficient_currency_balance
FAILED tests/test_integration.py::test_clear_market_with_no_bet_market - Fail...
FAILED tests/test_integration.py::test_clear_market_insufficient_liquidity_from_bets[1-100]
FAILED tests/test_integration.py::test_clear_market_insufficient_liquidity_from_bets[1-2]
FAILED tests/test_integration.py::test_withdraw_auction_cleared - pytezos.rpc...
FAILED tests/test_integration.py::test_withdraw_auction_bidded - AssertionErr...
FAILED tests/test_integration.py::test_withdraw_auction_resolved - AssertionE...
FAILED tests/test_integration.py::test_withdraw_auction_non_existent_market_id
FAILED tests/test_integration.py::test_mint_insufficient_currency_balance - A...
FAILED tests/test_integration.py::test_burn_token_on_cleared - pytezos.rpc.er...
FAILED tests/test_integration.py::test_swap_token_token_on_cleared[yes] - pyt...
FAILED tests/test_integration.py::test_swap_token_token_on_cleared[no] - KeyE...
FAILED tests/test_integration.py::test_swap_token_token_in_auction_phase - As...
FAILED tests/test_integration.py::test_swap_tokens_insufficient_currency_balance
FAILED tests/test_integration.py::test_add_liquidity_on_cleared - pytezos.rpc...
FAILED tests/test_integration.py::test_add_liquidity_in_auction_phase - Asser...
FAILED tests/test_integration.py::test_add_liquidity_insufficient_currency_balance
FAILED tests/test_integration.py::test_remove_liquidity_on_cleared - pytezos....
FAILED tests/test_integration.py::test_remove_liquidity_in_auction_phase - As...
FAILED tests/test_integration.py::test_remove_liquidity_insufficient_currency_balance
FAILED tests/test_integration.py::test_resolve_market_unauthorized_account[True]
FAILED tests/test_integration.py::test_resolve_market_unauthorized_account[False]
FAILED tests/test_integration.py::test_resolve_non_existent_market_id[True]
FAILED tests/test_integration.py::test_resolve_non_existent_market_id[False]
FAILED tests/test_integration.py::test_claim_winnings_unresolved_market - Fai...
============ 26 failed, 37 passed, 1 warning in 28304.90s (7:51:44) ============
